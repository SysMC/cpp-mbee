Проект предназначен для демонстрации приемов работы с библиотекой cpp-mbee при разработке программного обеспечения для микроконтроллеров семейства MSP430 производства Texas Instruments.
Описание имеющихся примеров:

1. Alarm.cpp

В данном примере микроконтроллер MSP430 работает в качестве автономного сигнализатора беспроводной сети тревожных датчиков.
В качестве беспроводных датчиков могут быть использованы датчики протечки, пожарно-охраннные извещатели, датчики газа, разбития стекла и тому подобные устройства
с цифровым выходом.
Для организации беспроводной сети применяются радиомодули MBee868-xx, работающие под управлением программного обеспечения SerialStar.
Все узлы сети должны иметь совпадающие сетевые настройки и эфирные параметры.
Модули, подключаемые к датчикам, должны иметь собственные адреса (параметр MY), лежащие в диапазоне SENSOR_ADDRESSES_START..SENSOR_ADDRESSES_END. Обычно такие датчики имеют автономное питание и поэтому должны
большую часть времени находится в спящем режиме. Отправка ими пакета, содержащего данные о состоянии линий ввода/вывода может осуществляться по срабатыванию датчика (параметр SM, должен быть установлен, равным 1),
по внутреннему таймеру(SM = 4) или в комбинированном режиме (SM = 5). Описание режимов сна находится в техническом описании программного обеспечения SerialStar.
Радиомодуль, подключаемый к микроконтроллеру MSP430 сигнализатора, должен работать в пакетном режиме (AP = 2). Битовая скорость на нем (устанавливается с помощью программы SysMCBootLoader)
должна совпадать со скоростью, определяемой параметром MBEE_UART_BITRATE.
Сигнализатор осуществляет прием пакетов (пакет 0x83) с данными о состоянии линий ввода/вывода от датчиков и фильтрует их на принадлежность заданному диапазону.
Если в пакете содержится информация о состоянии вывода радиомодя, определяемого константой ALARM_INPUT и если данный вывод используется как цифровой вход, то Сигнализатор
управляет своим выводом, задаваемым параметрами GPIO_PORT_LED1 и GPIO_PIN_LED1 (файл board.h) в зависимости от состояния входа ALARM_INPUT.
Тревожный сигнал на выходе сигнализатора может быть временно (до прихода очередного пакета) выключен кнопкой S1, настройки которой также определяются в файле board.h.
Если проект компилируется с опцией ENABLE_CONSOLE, то второй модуль eUSCI, имеющийся в микроконтроллере MSP430 используется для выдачи диагностических сообщений, а также как
альтернативный управляющий интерфейс. Отправив на UART консоли символ '1' можно временно выключить выходной сигнал также, как это происходит при нажатии кнопки S1.
Настройки параметров консоли осуществляются в файле alarm.h.

2. Controll.cpp
В данном примере микроконтроллер MSP430 выполняет роль пульта беспроводной системы управления освещением.
Для организации беспроводной сети применяются радиомодули MBee868-xx, работающие под управлением программного обеспечения SerialStar.
Все узлы сети должны иметь совпадающие сетевые настройки и эфирные параметры.
Радиомодуль, подключаемый к микроконтроллеру MSP430 пульта, должен работать в пакетном режиме (AP = 2). Битовая скорость на нем (устанавливается с помощью программы SysMCBootLoader)
должна совпадать со скоростью, определяемой параметром MBEE_UART_BITRATE.
Пульт осуществляет отправку AT-команд удаленному радиомодулю (target), адрес которого определяется константой TARGET_ADDRESS. Передача команд осуществляется кнопкой S1. Команды отправляются
циклически. Смысл каждой команды поясняется соответствующим комментарием.
Если проект компилируется с опцией ENABLE_CONSOLE, то второй модуль eUSCI, имеющийся в микроконтроллере MSP430 используется для выдачи диагностических сообщений, а также как
альтернативный управляющий интерфейс. Настройки параметров консоли осуществляются в файле control.h.

Аппаратные ресурсы микроконтроллера, требуюшиеся для работы библиотеки cpp-mbee:
1. Таймер Timer_A или Timer_B.
2. Модуль eUSCI_A для подключения к радиомодулю. 
3. Модуль eUASRT_A, использующийся в качестве опциональной консоли для вывода диагностической информации и организации дополнительного управляющего интерфейса. Наличие консоли управляется опцией компиляции ENABLE_CONSOLE. 

Назначение "по-умолчанию" конкретного аппаратного модуля осуществляется в файле MSP430Serial.cpp, входящего в состав cpp-mbee. Для того, чтобы переписать значение "по-умолчанию" необходимо определить модуль UART до компиляции
файла MSP430Serial.cpp. Для проектов IAR и Code Composer Studio, можно сделать это, например, в конфигурационном файле (см. файлы AlarmCpp-mbeeConfig.dat и ControlCpp-mbeeConfig.dat) или preinclude-файле.
Аналогичным образом делается назначение для модуля таймера Timer_A или Timer_B.

Настройки "по-умолчанию" всех аппаратных модулей предполагают, что тактовая частота SMCLK установлена равной 8 МГц. Эти настройки могут быть легко изменены в соответствии с индивидуальными требованиями в соответствующих
файлах проекта.

Примеры предназначаются для следующих отладочных плат, выпускаемых Texas Instruments, на базе следующих моделей микроконтроллеров.
1. MSP430FR4133.
2. MSP430FR2311.
3. MSP430FR2433.
4. MSP430FR2355.

Предполагается, что примеры могут быть легко портированы на микроконтроллер MSP430 других семейств при наличии в их составе аппаратных ресурсов, указанных выше.
В случае необходимости линии ввода/вывода могут быть переопределены в файле Board.h.

IAR.
Размеры выходных файлов примеров таковы, что позволяют работать с проектом даже на бесплатной версии IAR с ограничением по длине кода 8 килобайт.
1. Для работы с примерами откройте файл Examples.eww.

Code Composer Studio (CCS).
1. Запустите CCS.
2. Во вкладке Projects/Import CCS Projects выберите путь к каталогу cpp-mbee\examples\MSP430\CCS и импортируйте требуемые проекты с примерами в свое рабочее пространство (workspace).
3. Для корректного отображения комментариев при работе с проектом в Code Composer Studio (CCS) установите UTF-8 кодировку ("Window/Preferences/General/Workspace Text File Encoding = UTF-8).