/**
  @page Пример Alarm (Сигнализатор)

  @verbatim
  ******************************************************************************
  * @file    Alarm/readme.txt
  * @author  von Boduen
  * @brief   Описание примера Alarm (Сигнализатора).
  ******************************************************************************
  *
  * Copyright (c) 2019 Systems, modules and components. All rights reserved.
  *
  * Библиотека C++ для модулей MBee. Пример использования библиотеки cpp-mbee на микроконтроллерах STM32.
  * Распространяется свободно. Надеемся, что программные продукты, созданные
  * на основе данного примера будут полезными, однако никакие гарантии, явные или
  * подразумеваемые не предоставляются.
  *
  ******************************************************************************
  @endverbatim

@par Описание примера.

В данном примере микроконтроллер STM32 работает в качестве автономного сигнализатора беспроводной сети тревожных датчиков.
В качестве беспроводных датчиков могут быть использованы датчики протечки, пожарно-охранные извещатели, датчики газа, разбития стекла и тому подобные устройства с цифровым выходом.

@note Настройки периферийных модулей могут быть изменены с помощью проекта Alarm.ioc для STM32CubeMX .

@par Keywords

MBee, C++, Library, Wireless, SerialStar, Systems, Modules, Components, STM32

@par Directory contents
  - Alarm/Inc/gpio.h                    Заголовочный файл драйвера портов ввода/вывода gpio.c
  - Alarm/Inc/main.h                    Заголовочный файл для main.c
  - Alarm/Inc/stm32g0xx_hal_conf.h      Конфигурационный файл HAL
  - Alarm/Inc/stm32g0xx_it.h            Заголовочный файл для файла хэндлеров прерываний stm32g0xx_it.c
  - Alarm/Inc/sys.h                     Заголовочный файл драйвера системного модуля sys.c
  - Alarm/Inc/tim.h                     Заголовочный файл драйвера таймеров tim.c
  - Alarm/Inc/usart.h                   Заголовочный файл драйвера последовательного интерфейса usart.c
  - Alarm/Src/gpio.c                    Драйвер портов ввода/вывода
  - Alarm/Src/main.c                    Главный файл примера
  - Alarm/Src/stm32g0xx_hal_msp.c       Модуль HAL MSP
  - Alarm/Src/stm32g0xx_it.c            Хэндлеры прерываний
  - Alarm/Src/sys.c                     Драйвер модуля SYS
  - Alarm/Src/system_stm32g0xx.c        Исходные файлы ядра STM32G0xx
  - Alarm/Src/tim.c                     Драйвер таймера
  - Alarm/Src/usart.c                   Драйвер модуля последовательного интерфейса.
  - Alarm/SW4STM32/Alarm/mainRename.bat Командный файл, вызываемый IDE SW4STM32 для переименования файла main.c в main.cpp перед компиляцией проекта (Pre-build steps).
  - Alarm/SW4STM32/Alarm/releaseConfigurationDefinedSymbolsC++Patch.dat Файл с Predefined symbols для IDE SW4STM32, предназначенный для фиксации бага в SW4STM32, вследствие которого при вызове компилятора g++ в конфигурации "Release" не происходит включение
                                        в командную строку символов, имеющихся в настройках C/C++ General/Paths and Symbols.

@par Необходимые аппаратные и программные средства:

  1. Радиомодули MBee-868-2.0 или MBee-868-3.0 не менее 2 шт.
  2. Отладочная плата NUCLEO-G071RB.
  3. Плата "Troyka Slot Shield v2", модули "Troyka MBee", "Кнопка со светодиодом" и "Зуммер" производства фирмы "Амперка". Вместо "Troyka MBee" можно использовать любую плату из серии XBee Shield или совместимые. В случае отсутствия таковых, радиомодуль может
  быть соединен с платой NUCLEO с помощью всего 4 проводов: UART TX, UART RX, GND и +3,3В.
  4. Плата MB-Tag-1.2 ("Системы, модули и компоненты").
  5. Переходник USB-UART с адаптером для подключения радиомодуля. Рекомендуется использовать преобразователь MB-USBridge-1.2 ("Системы, модули и компоненты").

  Все радиомодули должны быть запрограммированы актуальной версией программного обеспечения SerialStar (доступно для бесплатного скачивания на сайте www.sysmc.ru) и предварительно настроены:

  Порядок загрузки ПО и настройки радиомодулей:
  1. Подключить модуль к компьютеру через переходник USB-UART и определить номер COM-порта, который был присвоен переходнику при подключении. В случае необходимости, требуется установить драйверы FT232, если они не установятся автоматически.
  2. С помощью программы SysmcBootLoader (доступна для бесплатного скачивания на сайте www.sysmc.ru) загрузить в модуль прошивку SerialStar.
  3. Запустить любую терминальную программу с параметрами 9600 8N1.
  4. Войти в командный режим передав последовательность +++ или нажав кнопку SYSTEM BUTTON на плате MB-USBridge-1.2.
  Настройка модуля, подключаемого к датчику (здесь и далее <CR> означает нажатие кнопки "Enter"):
  1. AT RE <CR>. Установить значения всех параметров "по умолчанию".
  2. AT SM 4 <CR>. Установить "спящий" режим работы модуля с пробуждением по внутреннему таймеру.
  3. AT SP 500 <CR>. Установить период таймера сна, равным 5 секунд.
  4. AT MY 2 <CR>. Присвоить модулю сетевой адрес 2. Допустимый диапазон адресов датчиков SENSOR_ADDRESSES_START..SENSOR_ADDRESSES_END задается в файле "main.h".
  5. AT CN <CR>. Сохранить сделанные изменения, выйти из командного режима и выполнить рестарт модуля.

  Подробное описание всех настраиваемых параметров находится в техническом описании программного обеспечения SerialStar.
  После этого модуль необходимо вставить в плату MB-Tag-1.2 и подать на него питание.

  Настройка модуля, подключаемого к сигнализатору:
  1. AT RE <CR>. Установить значения всех параметров "по-умолчанию".
  2. AT AP 2 <CR>. Перевести модуль в пакетный режим работы UART с поддержкой ESCAPE-символов.
  3. AT CN <CR>. Сохранить сделанные изменения, выйти из командного режима и выполнить рестарт модуля.

  Сборка макета:
  1. Установить радиомодуль на плату Troyka MBee, которая, в свою очередь, должна быть подключена к NUCLEO посредством адаптера Troyka Slot Shield v2.
  2. Установить модуль "Кнопка со светодиодом" в поле "D" платы Troyka Slot Shield v2. Линия "L" должна быть вставлена в контакт "A3".
  3. В поле "A" поставить модуль "Зуммер". Вывод "S" должен вставляться в контакт "7VG". Модуль "Зуммер" не является обязательным. При его отсутствии индикация срабатывания удаленного датчика может быть осуществлена только по светодиодам.

  Светодиод и кнопка модуля "Troyka" дублируется светодиодом и кнопкой, расположенными на плате NUCLEO.

@par Как пользоваться примером?
  Необходимо загрузить предпочитаемую среду разработки и запрограммировать микроконтроллер STM32:
  IAR.
  1. Откройте файл Project.eww, находящийся в папке EWARM.
  2. Откомпилируйте пример, загрузите его в микроконтроллер отладочной платы и запустите его.
  
  SW4STM32 (AC6).
  1. Откройте файл .cproject, находящийся в папке SW4STM32\Alarm.
  2. Откомпилируйте пример, загрузите его в микроконтроллер отладочной платы и запустите его.
  
  При необходимости изменить настройки аппаратных модулей микроконтроллера:
  1. Откройте с помощью STM32CubeMX файл Alarm.ioс.
  2. Выполните требуемые изменения.
  3. Выберите в Project Manager требуемый Toolchain/IDE (EWARM или SW4STM32). ВНИМАНИЕ! Если Вы выбрали SW4STM32, то обязательно снимите флажок с опции "Generate under root".
  4. Нажмите "GENERATE CODE".
  5. Если Вы пользуетесь SW4STM32, то перед первой компиляцией проекта исключите файл main.c из сборки, установив флажок "Exclude resource from build". Для этого щелкните правой кнопкой по файлу main.c и выберите в появившемся меню строку "Options".
     Требуемая опция находится в окне "C/C++ Build/Settings". Вместо файла main.c, при компиляции будет использоваться автоматически копируемый при запуске компилятора файл main.cpp. Исключить файл main.c необходимо как для конфигурации "Debug", так и 
     для "Release".

  Сигнализатор осуществляет прием пакетов (пакет 0x83) с данными о состоянии линий ввода/вывода от датчиков и фильтрует их на принадлежность заданному диапазону адресов.
  Если в пакете содержится информация о состоянии вывода радиомодуля, определяемого константой ALARM_INPUT и если данный вывод используется как цифровой вход, то сигнализатор управляет выводами NUCLEO_LED, USER_LED1 и BUZZER
  в зависимости от состояния входа ALARM_INPUT радиомодуля датчика.
  Тревожный сигнал на выходе сигнализатора может быть временно (до прихода очередного пакета) выключен кнопками NUCLEO_BUTTON или USER_BUTTON1.
  В примере демонстрируется также возможность отправки сообщений в направлении от сигнализатора к удаленному датчику, находящемуся в спящем режиме. При нажатии на любую кнопку происходит отправка команды на модуль, пакет от которого был принят последним,
  команды на включение/выключение цифрового вывода. Идентификатор выхода задается константой ACTUATOR_OUTPUT.
  Если проект компилируется с опцией ENABLE_CONSOLE (файл main.h), то появляется возможность использовать порт STMicroelectronics STLink Virtual COM Port для выдачи диагностических сообщений, а также как альтернативный управляющий
  интерфейс. Отключение консоли значительно уменьшает объем памяти, занимаемой примером. Настройки параметров консоли осуществляются в файле main.h.Отправив на UART консоли символ '1' можно временно выключить выходной
  сигнал также, как это происходит при нажатии кнопок. При передачи символа "2" на удаленный модуль отправляется команда включения/выключения цифрового выхода.
  
  SW4STM32 (AC6)
  1. Откройте файл .cproject, находящийся в папке SW4STM32\Alarm.
  2. Откомпилируйте пример, загрузите его в микроконтроллер отладочной платы и запустите его.


 * <h3><center>&copy; Systems, modules and components</center></h3>
 */